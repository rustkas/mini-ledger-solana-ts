import { describe, it, expect } from 'vitest';
import { PoH } from '../core/poh';

describe('PoH', () => {
  it('produces deterministic ticks from seed', () => {
    /**
     * —Å–æ–∑–¥–∞—ë–º PoH –∏–∑ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ seed (32 –±–∞–π—Ç–∞ –Ω—É–ª–µ–π),
     * –¥–≤–∞ —Ä–∞–∑–∞ –¥–µ–ª–∞–µ–º tick() (—à–∞–≥: hash –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è),
     * –ø–æ–ª—É—á–∞–µ–º –¥–≤–∞ —Ä–∞–∑–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏—è (a1, a2).
     */
    const poh = PoH.fromSeed('00'.repeat(32));
    const a1 = poh.tick().current();
    const a2 = poh.tick().current();

    /**
     * —Å–æ–∑–¥–∞—ë–º –≤—Ç–æ—Ä–æ–π PoH —Å —Ç–µ–º –∂–µ seed,
     * –¥–µ–ª–∞–µ–º —Å—Ç–æ–ª—å–∫–æ –∂–µ —Ç–∏–∫–æ–≤ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–≤–ø–∞–¥–∞—é—Ç.
     * üëâ –ü—Ä–æ–≤–µ—Ä–∫–∞: –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ö—ç—à–µ–π –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∞ (–∑–∞–≤–∏—Å–∏—Ç —Ç–æ–ª—å–∫–æ –æ—Ç seed –∏ —á–∏—Å–ª–∞ —à–∞–≥–æ–≤).
     */
    const poh2 = PoH.fromSeed('00'.repeat(32));
    poh2.tick();
    expect(poh2.current()).toBe(a1);
    poh2.tick();
    expect(poh2.current()).toBe(a2);
  });

  it('stamps data into the sequence', () => {

    /**
     * —Å–æ–∑–¥–∞—ë–º PoH —Å –¥—Ä—É–≥–∏–º seed,
     * —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ,
     * ¬´–≤–ø–ª–µ—Ç–∞–µ–º¬ª –¥–∞–Ω–Ω—ã–µ (hello) –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å (stamp),
     * –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å.
     * üëâ –ü—Ä–æ–≤–µ—Ä–∫–∞: –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö PoH –º–µ–Ω—è–µ—Ç—Å—è.
     */
    const poh = PoH.fromSeed('11'.repeat(32));
    const before = poh.current();
    poh.stamp(Buffer.from('hello'));
    const after = poh.current();
    expect(after).not.toBe(before);
  });
});
